[{"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\index.js":"1","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\reportWebVitals.js":"2","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\App.js":"3","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\navbar\\navbar.js":"4","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\top-movies\\top-movies.js":"5","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\single-movie\\single-movie.js":"6","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\single-star\\single-star.js":"7","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\signin\\signin.js":"8","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\home\\home.js":"9","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\movies-result\\movies-result.js":"10"},{"size":997,"mtime":1689466429149,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1687385175577,"results":"13","hashOfConfig":"12"},{"size":1879,"mtime":1689900769564,"results":"14","hashOfConfig":"12"},{"size":2557,"mtime":1691530897119,"results":"15","hashOfConfig":"12"},{"size":2894,"mtime":1689894609240,"results":"16","hashOfConfig":"12"},{"size":4491,"mtime":1691449359625,"results":"17","hashOfConfig":"12"},{"size":3374,"mtime":1691449432065,"results":"18","hashOfConfig":"12"},{"size":3090,"mtime":1689466604567,"results":"19","hashOfConfig":"12"},{"size":1926,"mtime":1691451329230,"results":"20","hashOfConfig":"12"},{"size":7153,"mtime":1691451221116,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"8sef32",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"25"},"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\index.js",[],[],[],"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\reportWebVitals.js",[],[],"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\App.js",["55","56","57","58","59"],[],"import React, { useState, useEffect, createContext } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Home from './components/home/home';\n// import Login from './components/signin/signin';\nimport TopMovies from './components/top-movies/top-movies';\nimport Navbar from './components/navbar/navbar';\nimport SingleMovie from './components/single-movie/single-movie';\nimport SingleStar from './components/single-star/single-star';\nimport { Routes, Route, Navigate, useNavigate } from 'react-router-dom';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport MoviesResult from './components/movies-result/movies-result';\n\nconst SessionContext = createContext();\n\nfunction App() {\n\tconst { isAuthenticated, loginWithRedirect } = useAuth0();\n\n\tconst [mySession, setSession] = useState({});\n\n\taxios.defaults.withCredentials = true;\n\n\treturn (\n\t\t<SessionContext.Provider value={{mySession, setSession}}>\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/\" element={<Navbar/>}>\n\t\t\t\t\t<Route path=\"/home\" element={<Home/>}/>\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<Route path=\"/movies\" element={<MoviesResult/>}/>\n\t\t\t\t\t\t<Route path=\"/top-movies\" element={<TopMovies/>}/>\n\t\t\t\t\t\t<Route path=\"/single-movie\" element={<SingleMovie/>}/>\n\t\t\t\t\t\t<Route path=\"/single-star\" element={<SingleStar/>}/>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t</Route>\n\t\t\t</Routes>\n\t\t</SessionContext.Provider>\n\t\t\t\t// <div className=\"App\">\n\t\t\t\t// \t<Navbar/>\n\t\t\t\t// \t<div className=\"content\">\n\t\t\t\t// \t\t{/* <Routes>\n\t\t\t\t// \t\t\t{isAuthenticated\n\t\t\t\t// \t\t\t? (<>\n\t\t\t\t// \t\t\t<Route path=\"/\" element={<TopMovies/>}/>\n\t\t\t\t// \t\t\t<Route path=\"/top-movies\" element={<TopMovies/>}/>\n\t\t\t\t// \t\t\t<Route path=\"/single-movie\" element={<SingleMovie/>}/>\n\t\t\t\t// \t\t\t<Route path=\"/single-star\" element={<SingleStar/>}/></>)\n\t\t\t\t// \t\t\t: \n\t\t\t\t// \t\t\tloginWithRedirect()\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t</Routes> */}\n\t\t\t\t// \t</div>\n\t\t\t\t// </div>\n\t);\n}\n\nexport {App, SessionContext};\n","C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\navbar\\navbar.js",[],[],"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\top-movies\\top-movies.js",[],[],"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\single-movie\\single-movie.js",[],[],"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\single-star\\single-star.js",[],[],"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\signin\\signin.js",["60"],[],"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\home\\home.js",[],[],"C:\\Users\\straw\\Desktop\\personal\\fabflix-remake\\front-end\\src\\components\\movies-result\\movies-result.js",["61"],[],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSortUp, faSortDown, faStar } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './movies-result.css';\r\n\r\nconst MoviesResult = () => {\r\n\r\n    \r\n    const [movieData, setMovieData] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [totalResult, setTotal] = useState(-1);\r\n    const [sortOrder, setSortOrder] = useState(\"asc\");\r\n    const [sortBy, setSortBy] = useState(\"rating\");\r\n    const [isExhausted, setIsExhausted] = useState(false);\r\n\r\n    const perPage = 10;\r\n    const numPage = 5;\r\n    const location = useLocation()\r\n\r\n    const urlParams = useMemo(() => new URLSearchParams(location.search), [location.search]);\r\n\r\n    const reset = () => {\r\n        setMovieData([]);\r\n        setTotal(-1);\r\n        setCurrentPage(1);\r\n        setIsExhausted(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        reset();\r\n    }, [urlParams])\r\n\r\n    useEffect(() => {\r\n        console.log(movieData)\r\n        if ( (isExhausted && (movieData.length !== totalResult)) || currentPage === 1 ) {\r\n            \r\n            fetchDataManager(urlParams);\r\n        }\r\n    }, [currentPage, isExhausted, totalResult]);\r\n\r\n    const fetchByStartChar = async (startCharacter) => {\r\n        try {\r\n            const params = new URLSearchParams({startCharacter, currentPage, sortOrder, sortBy, perPage, numPage});\r\n            const response = await fetch(`http://localhost:5000/api/byStartCharacter?${params}`);\r\n            const jsonData = await response.json();\r\n            if ( currentPage === 1 ) { setTotal(jsonData.total); }\r\n            setIsExhausted(false);\r\n            \r\n            setMovieData([...movieData, ...jsonData.moviesList]);\r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        }\r\n    };\r\n\r\n    const fetchByGenre = async (genreId) => {\r\n        try {\r\n            const params = new URLSearchParams({genreId, currentPage, sortOrder, sortBy, perPage, numPage});\r\n            const response = await fetch(`http://localhost:5000/api/byGenre?${params}`);\r\n            const jsonData = await response.json();\r\n            if ( currentPage === 1 ) { setTotal(jsonData.total); }\r\n            setIsExhausted(false);\r\n            \r\n            setMovieData([...movieData, ...jsonData.moviesList]);\r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        }\r\n    };\r\n\r\n    // Decide which endpoint to call\r\n    const fetchDataManager = (urlParams) => {\r\n        if (urlParams.get('startCharacter')) {\r\n            fetchByStartChar(urlParams.get('startCharacter'));\r\n        } else if (urlParams.get('genreId')) {\r\n            fetchByGenre(Number(urlParams.get('genreId')));\r\n        }\r\n    };\r\n\r\n    const changeSortOrder = () => {\r\n        if (sortOrder === \"asc\") {\r\n            setSortOrder(\"desc\");\r\n        } else {\r\n            setSortOrder(\"asc\");\r\n        }\r\n        reset();\r\n    };\r\n\r\n    const prevButtonEvent = () => {\r\n        if ( currentPage > 1 ) {\r\n            setCurrentPage((current) => current - 1)\r\n        }\r\n        \r\n    };\r\n\r\n    const nextButtonEvent = () => {\r\n        setCurrentPage((current) => current + 1)\r\n        if ( (currentPage % 5) === 4 ) { setIsExhausted(true); }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"page-content\">\r\n            <h1>Movies Result</h1>\r\n            <div style={{display:\"flex\", justifyContent: \"end\", gap: \"1%\"}}>\r\n                <label defaultValue={sortBy} onChange={ (e) => {setSortBy(e.target.value); reset();} } htmlFor=\"sortby\">Sort By: \r\n                <select name=\"sortby\" id=\"sortby\" style={{height: \"27px\"}}>\r\n                    <option value=\"rating\">Rating</option>\r\n                    <option value=\"title\">Title</option>\r\n                    <option value=\"year\">Release</option>\r\n                    <option value=\"director\">Director</option>\r\n                </select> \r\n                </label>\r\n                <button className=\"sortOrderBtn\" onClick={changeSortOrder}>\r\n                    {(sortOrder === \"asc\") \r\n                    ? <FontAwesomeIcon icon={faSortUp} rotatation={0} style={{color: \"#007bff\", }} />\r\n                    : <FontAwesomeIcon icon={faSortDown} rotatation={180} style={{color: \"#007bff\", }} />\r\n                    }\r\n                </button>\r\n            </div>\r\n            <table className=\"table table-striped\">\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        <th></th>\r\n                        <th scope=\"col\" >Title</th>\r\n                        <th scope=\"col\" >Release Year</th>\r\n                        <th scope=\"col\" >Director</th>\r\n                        <th scope=\"col\" >Genres</th>\r\n                        <th scope=\"col\" >Stars</th>\r\n                        <th scope=\"col\" >Rating</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {movieData.slice((currentPage - 1) * perPage, (currentPage - 1) * perPage + 10).map((item, index) => (\r\n                    <tr key={item.movieId}>\r\n                        <td>{(currentPage-1)*10 + index + 1}</td>\r\n                        <td><Link to={`/single-movie?movieId=${item.movieId}`} className=\"link\">{item.movieTitle}</Link></td>\r\n                        <td>{item.movieYear}</td>\r\n                        <td>{item.movieDirector}</td>\r\n                        <td>\r\n                            {item.movieGenres.map((gObj, gIndex) => (\r\n                            <React.Fragment key={gObj.genreId}>\r\n                                <Link to={`/movies?genreId=${gObj.genreId}`} className=\"link\">{gObj.genreName}</Link>\r\n                                {gIndex < item.movieGenres.length - 1 && ', '}\r\n                            </React.Fragment>\r\n                            ))}\r\n                        </td>\r\n                        <td>\r\n                            {item.movieStars.map((sObj, sIndex) => (\r\n                            <React.Fragment key={sObj.starId}>\r\n                                <Link to={`/single-star?starId=${sObj.starId}`} className=\"link\">{sObj.starName}</Link>\r\n                                {sIndex < item.movieStars.length - 1 && ', '}   \r\n                            </React.Fragment>\r\n                            ))}\r\n                        </td>\r\n                        <td>{item.movieRating} \r\n                        <FontAwesomeIcon icon={faStar} color=\"#8DBA5E\" size=\"sm\" /></td>\r\n\r\n                    </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            <div className='paginationButtons'>\r\n                <button onClick={prevButtonEvent} disabled={currentPage === 1}>Prev</button>\r\n                <span>{currentPage}</span>\r\n                <button onClick={nextButtonEvent} disabled={Math.floor(totalResult/perPage) + 1 === currentPage}>Next</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MoviesResult;",{"ruleId":"62","severity":1,"message":"63","line":1,"column":27,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"66","line":10,"column":25,"nodeType":"64","messageId":"65","endLine":10,"endColumn":33},{"ruleId":"62","severity":1,"message":"67","line":10,"column":35,"nodeType":"64","messageId":"65","endLine":10,"endColumn":46},{"ruleId":"62","severity":1,"message":"68","line":17,"column":10,"nodeType":"64","messageId":"65","endLine":17,"endColumn":25},{"ruleId":"62","severity":1,"message":"69","line":17,"column":27,"nodeType":"64","messageId":"65","endLine":17,"endColumn":44},{"ruleId":"62","severity":1,"message":"63","line":1,"column":27,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"70","severity":1,"message":"71","line":42,"column":8,"nodeType":"72","endLine":42,"endColumn":47,"suggestions":"73"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'useNavigate' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'loginWithRedirect' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchDataManager', 'movieData', and 'urlParams'. Either include them or remove the dependency array.","ArrayExpression",["74"],{"desc":"75","fix":"76"},"Update the dependencies array to be: [currentPage, fetchDataManager, isExhausted, movieData, totalResult, urlParams]",{"range":"77","text":"78"},[1321,1360],"[currentPage, fetchDataManager, isExhausted, movieData, totalResult, urlParams]"]