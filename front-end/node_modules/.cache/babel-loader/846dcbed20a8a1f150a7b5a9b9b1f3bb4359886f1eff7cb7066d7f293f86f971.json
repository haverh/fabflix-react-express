{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\straw\\\\Desktop\\\\personal\\\\fabflix-remake\\\\front-end\\\\src\\\\components\\\\fulltext-search\\\\fulltext.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FulltextInput = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [suggestionsMap, setSuggestionsMap] = useState({});\n  const fetchSuggestions = async input => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/fulltext?input=${input}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      return null; // Return null or some default value in case of error\n    }\n  };\n\n  const handleSuggestions = async inputValue => {\n    if (suggestionsMap[inputValue]) {\n      return suggestionsMap[inputValue];\n    } else {\n      // undefined\n      const suggestions = await fetchSuggestions(inputValue);\n      setSuggestionsMap(prevSuggestions => ({\n        ...prevSuggestions,\n        [inputValue]: suggestions\n      }));\n      return suggestions;\n    }\n  };\n  const onSuggestionsFetchRequested = async _ref => {\n    let {\n      input\n    } = _ref;\n    const inputSuggestions = await handleSuggestions(input);\n    setSuggestions(inputSuggestions);\n  };\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n  const getSuggestionValue = suggestion => suggestion;\n  const renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: suggestion\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n  const inputProps = {\n    input,\n    onChange: (_, _ref2) => {\n      let {\n        newValue\n      } = _ref2;\n      setInput(newValue);\n    }\n  };\n  const fetchData = event => {\n    event.preventDefault();\n    const inputValue = event.target.fsInput.value;\n    console.log(inputValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n  // return (\n  //     <div className=\"search-component h-100\">\n  //         <form className=\"d-flex input-group w-auto\" onSubmit={fetchData}>\n  //             <input\n  //                 name='fsInput'\n  //                 type=\"search\"\n  //                 className=\"me-0 rounded-left search-input\"\n  //                 placeholder=\"Fulltext Search\"\n  //                 aria-label=\"Search\"\n  //                 aria-describedby=\"search-addon\"\n  //                 onChange={handleSuggestions}\n  //             />\n  //             <button type='submit' className='rounded-right search-button' variant='outline-primary'>\n  //                 <FontAwesomeIcon icon={faSearch} />\n  //             </button>\n  //         </form>\n  //     </div>z\n  // )\n};\n_s(FulltextInput, \"qaP945UsnVr6VX43YcP6bfIPbcc=\");\n_c = FulltextInput;\nexport default FulltextInput;\nvar _c;\n$RefreshReg$(_c, \"FulltextInput\");","map":{"version":3,"names":["React","useState","Autosuggest","FontAwesomeIcon","faSearch","jsxDEV","_jsxDEV","FulltextInput","_s","input","setInput","suggestions","setSuggestions","suggestionsMap","setSuggestionsMap","fetchSuggestions","response","fetch","data","json","error","console","handleSuggestions","inputValue","prevSuggestions","onSuggestionsFetchRequested","_ref","inputSuggestions","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","children","fileName","_jsxFileName","lineNumber","columnNumber","inputProps","onChange","_","_ref2","newValue","fetchData","event","preventDefault","target","fsInput","value","log","_c","$RefreshReg$"],"sources":["C:/Users/straw/Desktop/personal/fabflix-remake/front-end/src/components/fulltext-search/fulltext.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst FulltextInput = () => {\r\n    const [input, setInput] = useState('');\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const [suggestionsMap, setSuggestionsMap] = useState({});\r\n\r\n    const fetchSuggestions = async (input) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/fulltext?input=${input}`);\r\n            const data = await response.json();\r\n            return data;\r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n            return null; // Return null or some default value in case of error\r\n          }\r\n    }\r\n\r\n    const handleSuggestions = async (inputValue) => {\r\n\r\n        if ( suggestionsMap[inputValue] ) {\r\n            return suggestionsMap[inputValue];\r\n        } else { // undefined\r\n            const suggestions = await fetchSuggestions(inputValue);\r\n            setSuggestionsMap(\r\n                prevSuggestions => ({\r\n                    ...prevSuggestions,\r\n                    [inputValue]: suggestions\r\n                })\r\n            )\r\n            return suggestions;\r\n        }\r\n    }\r\n\r\n    const onSuggestionsFetchRequested = async ({ input }) => {\r\n        const inputSuggestions = await handleSuggestions(input);\r\n        setSuggestions(inputSuggestions);\r\n    };\r\n\r\n    const onSuggestionsClearRequested = () => {\r\n        setSuggestions([]);\r\n    };\r\n\r\n    const getSuggestionValue = suggestion => suggestion;\r\n\r\n    const renderSuggestion = suggestion => (\r\n        <div>{suggestion}</div>\r\n    );\r\n\r\n    const inputProps = {\r\n        input,\r\n        onChange: (_, { newValue }) => {\r\n            setInput(newValue);\r\n        }\r\n    };\r\n\r\n    const fetchData = (event) => {\r\n        event.preventDefault();\r\n        \r\n        const inputValue = event.target.fsInput.value;\r\n\r\n        console.log(inputValue);\r\n    }\r\n\r\n\r\n    return (\r\n        <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n        />\r\n    );\r\n    // return (\r\n    //     <div className=\"search-component h-100\">\r\n    //         <form className=\"d-flex input-group w-auto\" onSubmit={fetchData}>\r\n    //             <input\r\n    //                 name='fsInput'\r\n    //                 type=\"search\"\r\n    //                 className=\"me-0 rounded-left search-input\"\r\n    //                 placeholder=\"Fulltext Search\"\r\n    //                 aria-label=\"Search\"\r\n    //                 aria-describedby=\"search-addon\"\r\n    //                 onChange={handleSuggestions}\r\n    //             />\r\n    //             <button type='submit' className='rounded-right search-button' variant='outline-primary'>\r\n    //                 <FontAwesomeIcon icon={faSearch} />\r\n    //             </button>\r\n    //         </form>\r\n    //     </div>z\r\n    // )\r\n}\r\n\r\nexport default FulltextInput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,QAAQ,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExD,MAAMc,gBAAgB,GAAG,MAAON,KAAK,IAAK;IACtC,IAAI;MACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2CR,KAAM,EAAC,CAAC;MACjF,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI,CAAC,CAAC;IACf;EACN,CAAC;;EAED,MAAME,iBAAiB,GAAG,MAAOC,UAAU,IAAK;IAE5C,IAAKV,cAAc,CAACU,UAAU,CAAC,EAAG;MAC9B,OAAOV,cAAc,CAACU,UAAU,CAAC;IACrC,CAAC,MAAM;MAAE;MACL,MAAMZ,WAAW,GAAG,MAAMI,gBAAgB,CAACQ,UAAU,CAAC;MACtDT,iBAAiB,CACbU,eAAe,KAAK;QAChB,GAAGA,eAAe;QAClB,CAACD,UAAU,GAAGZ;MAClB,CAAC,CACL,CAAC;MACD,OAAOA,WAAW;IACtB;EACJ,CAAC;EAED,MAAMc,2BAA2B,GAAG,MAAAC,IAAA,IAAqB;IAAA,IAAd;MAAEjB;IAAM,CAAC,GAAAiB,IAAA;IAChD,MAAMC,gBAAgB,GAAG,MAAML,iBAAiB,CAACb,KAAK,CAAC;IACvDG,cAAc,CAACe,gBAAgB,CAAC;EACpC,CAAC;EAED,MAAMC,2BAA2B,GAAGA,CAAA,KAAM;IACtChB,cAAc,CAAC,EAAE,CAAC;EACtB,CAAC;EAED,MAAMiB,kBAAkB,GAAGC,UAAU,IAAIA,UAAU;EAEnD,MAAMC,gBAAgB,GAAGD,UAAU,iBAC/BxB,OAAA;IAAA0B,QAAA,EAAMF;EAAU;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CACzB;EAED,MAAMC,UAAU,GAAG;IACf5B,KAAK;IACL6B,QAAQ,EAAEA,CAACC,CAAC,EAAAC,KAAA,KAAmB;MAAA,IAAjB;QAAEC;MAAS,CAAC,GAAAD,KAAA;MACtB9B,QAAQ,CAAC+B,QAAQ,CAAC;IACtB;EACJ,CAAC;EAED,MAAMC,SAAS,GAAIC,KAAK,IAAK;IACzBA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,MAAMrB,UAAU,GAAGoB,KAAK,CAACE,MAAM,CAACC,OAAO,CAACC,KAAK;IAE7C1B,OAAO,CAAC2B,GAAG,CAACzB,UAAU,CAAC;EAC3B,CAAC;EAGD,oBACIjB,OAAA,CAACJ,WAAW;IACZS,WAAW,EAAEA,WAAY;IACzBc,2BAA2B,EAAEA,2BAA4B;IACzDG,2BAA2B,EAAEA,2BAA4B;IACzDC,kBAAkB,EAAEA,kBAAmB;IACvCE,gBAAgB,EAAEA,gBAAiB;IACnCM,UAAU,EAAEA;EAAW;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;AAAA5B,EAAA,CA3FKD,aAAa;AAAA0C,EAAA,GAAb1C,aAAa;AA6FnB,eAAeA,aAAa;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}